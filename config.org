y* Config
** Startup
#+BEGIN_SRC emacs-lisp
  (require 'package)
    (setq package-enable-at-startup nil)

    (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			     ("gnu" . "https://elpa.gnu.org/packages/")
			     ("org" . "https://orgmode.org/elpa/")))
  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package)
#+END_SRC

** Display Preferences
#+BEGIN_SRC emacs-lisp
  ;; Don't launch startup menu
  (setq inhibit-startup-message t)

  ;; Hide menus
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)

  ;; Don't save backups
  (setq make-backup-files nil)
  (setq auto-save-defaul nil)
  (kill-buffer "*scratch*")

  ;; Highlights focused line
  (global-hl-line-mode t)

  ;; Set Transparency
  (set-frame-parameter (selected-frame) 'alpha '(80 80))
  (add-to-list 'default-frame-alist '(alpha 80 80))

  ;; Display column number
  (setq column-number-mode t)

  ;; Display line numbers
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)

  ;; Theme
  (use-package spacemacs-theme
    :ensure t
    :init (load-theme 'spacemacs-dark t))

#+END_SRC

** Keyboard
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-z") 'undo)
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  #+END_SRC
** Ansi-Term
 #+BEGIN_SRC emacs-lisp
   (defvar my-term-shell "/bin/bash")
   (defadvice ansi-term (before force-bash)
     (interactive (list my-term-shell)))
   (ad-activate 'ansi-term)
   (global-set-key (kbd "<M-RET>") 'ansi-term)  
#+END_SRC

** Org-Mode
#+BEGIN_SRC emacs-lisp
  (setq org-support-shift-select t)
#+END_SRC
** Packages
*** which-key

`which-key` is a minor mode for Emacs that displays the key bindings following
your currently entered incomplete command (a prefix) in a popup. For example,
after enabling the minor mode if you enter C-x and wait for the default of 1
second the minibuffer will expand with all of the available key bindings that
follow C-x (or as many as space allows given your settings).

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))  
#+END_SRC

*** swiper

Swiper is an alternative to isearch that uses Ivy to show an overview of all matches.

#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t)
#+END_SRC

*** ivy

Ivy is a generic completion mechanism for Emacs. While it operates similarly to
other completion schemes such as icomplete-mode, Ivy aims to be more efficient,
smaller, simpler, and smoother to use yet highly customizable.

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
	   :map ivy-minibuffer-map
	   ("TAB" . ivy-alt-done)
	   ("C-l" . ivy-alt-done)
	   ("C-j" . ivy-next-line)
	   ("C-k" . ivy-previous-line)
	   :map ivy-switch-buffer-map
	   ("C-k" . ivy-previous-line)
	   ("C-l" . ivy-done)
	   ("C-d" . ivy-switch-buffer-kill)
	   :map ivy-reverse-i-search-map
	   ("C-k" . ivy-previous-line)
	   ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))
  (ivy-mode 1)
#+END_SRC

*** magit

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)
#+END_SRC



	    
*** projectile

Projectile is a project interaction library for Emacs. Its goal is to provide a
nice set of features operating on a project level without introducing external
dependencies (when feasible).

Common shortcuts:

C-c p f to find files within a project.
C-c p p to switch between projects.
C-c p s g to search for text using grep.

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :bind-keymap ("C-c p" . projectile-command-map)
    :config (projectile-mode +1))
#+END_SRC
